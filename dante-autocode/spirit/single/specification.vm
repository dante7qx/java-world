#set($bean=${context.javaBeanName})
#set($sbean=${context.javaBeanNameLF})
package com.hnair.hiapp.fss.specification.${context.packageName};

import java.util.List;
import java.util.Map;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.jpa.domain.Specification;
import com.hnair.hiapp.fss.util.StringUtils;
import com.google.common.collect.Lists;
import com.hnair.hiapp.fss.po.${context.packageName}.${bean}PO;;

/**
 * ${table.comment} 查询规约
 * 
 * @author dante
 * @date ${genDate}
 *
 */
public class ${bean}Specification {
	
	private ${bean}Specification() {
		throw new IllegalAccessError("${bean}Specification 不可实例化！");
	}

	public static Specification<${bean}PO> querySpecification(Map<String, Object> filter) {
		return new Specification<${bean}PO>() {
			@Override
			public Predicate toPredicate(Root<${bean}PO> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = Lists.newArrayList();
				
				/*
				String name = (String) filter.get("name");
				if (!StringUtils.isEmpty(name)) {
					Predicate nameLike = cb.like(root.get("name").as(String.class), "%" + name.trim() + "%");
					predicates.add(nameLike);
				}
				*/
				return predicates.isEmpty() ? cb.conjunction()
						: cb.and(predicates.toArray(new Predicate[predicates.size()]));
			}
		};
	}
}