/**
 * This file was generated by Data Model Tool
 * See <a href="http://www.hna.net/dmt/schema">http://www.hna.net/dmt/schema</a>
 *
 * Copyright (c) 2012 epolleo.com
 * All rights reserved.
 * HolidayService.java
 * Date: 2013-12-02
 */
package com.epolleo.bp.holiday.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;

import com.epolleo.bp.pub.AbstractService;
import com.epolleo.bp.seq.bean.IdKind;
import com.epolleo.bp.seq.service.SeqService;
import com.epolleo.bp.holiday.dao.ibatis.HolidayDao;
import com.epolleo.bp.holiday.bean.HolidayBean;
import com.epolleo.bp.holiday.bean.HolidaySaveBean;

/**
 * <p>
 * 节假日管理的业务类
 * </p>
 * 
 * Date: 2013-12-02 下午01:36:49
 * 
 * @author Data Model Tool
 * @version 1.0
 */
public class HolidayService extends AbstractService<HolidayBean, HolidayDao> {

    @Resource
    private SeqService seqService;

    @Resource
    public void setDao(HolidayDao dao) {
        this.dao = dao;
    }

    /**
     * 根据日期查询当月节假日
     * 
     * @param filter
     * @return
     */
    public List<HolidayBean> queryByDate(Map<String, Object> filter) {
        return dao.queryByDate(filter);

    }

    /**
     * 批量删除某月的节假日
     * 
     * @param year
     * @param month
     * @return
     */
    public int deleteByYearMonth(int year, int month) {
        Map<String, Object> filter = new HashMap<String, Object>();
        Calendar cal = Calendar.getInstance();
        cal.set(year, month, 1);
        filter.put("startDay", cal.getTime());
        cal.add(Calendar.MONTH, 1);
        filter.put("endDay", cal.getTime());
        return dao.deleteByYearMonth(filter);

    }

    /**
     * 批量保存节假日
     * 
     * @param days
     * @return
     */
    public int saveDays(List<HolidayBean> days) {
        int iresult = 0;
        for (HolidayBean entity : days) {
            entity.setHId(seqService.getNewId(IdKind.HolidayId));
            dao.save(entity);
            iresult++;
        }
        return iresult;
    }

    /**
     * 批量保存节假日
     * 
     * @param strDays
     * @return
     */
    public int saveDays(HolidaySaveBean bean) {
        this.deleteByYearMonth(bean.getYear(), bean.getMonth());
        int iresult = 0;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        Date date = null;

        HolidayBean entity = new HolidayBean();
        entity.setCreateTime(bean.getUpdateTime());
        entity.setCreateUser(bean.getUpdateUser());
        entity.setUpdateTime(bean.getUpdateTime());
        entity.setUpdateUser(bean.getUpdateUser());

        if (StringUtils.isNotEmpty(bean.getStrDays())) {
            String[] days = bean.getStrDays().split(",");
            // 节假日
            for (String day : days) {
                try {
                    entity.setHId(seqService.getNewId(IdKind.HolidayId));
                    date = sdf.parse(day);
                    entity.setHDate(date);
                    entity.setDateType(0);
                    dao.save(entity);
                    iresult++;
                } catch (ParseException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
        if (StringUtils.isNotEmpty(bean.getWkDays())) {
            // 工作日
            String[] wkDays = bean.getWkDays().split(",");
            for (String day : wkDays) {
                try {
                    entity.setHId(seqService.getNewId(IdKind.HolidayId));
                    date = sdf.parse(day);
                    entity.setHDate(date);
                    entity.setDateType(1);
                    dao.save(entity);
                    iresult++;
                } catch (ParseException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
        return iresult;
    }

    /**
     * 根据开始日期返回N天后的有效工作日期（包含开始日期当天）
     * @param startDate  开始日期
     * @param days  天数
     * @return
     */
    public Date getWorkDay(Date startDate, Integer dayCount) {
        return this.getWorkDay(startDate, dayCount, true);
    }

    /**
     * 根据开始日期返回N天后的有效工作日期（包含开始日期当天）
     * @param startDate   开始日期
     * @param days   天数
     * @param isContent   是否包含开始日期当天   
     * @return
     */
    public Date getWorkDay(Date startDate, int dayCount, boolean isContaint) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);
        Map<String, Object> filter = new HashMap<String, Object>();
        filter.put("startDay", startDate);

        // 1年365天大概有52周，则双休日大概每年有104天左右
        // 加上法定节假日等，按照150天来计算
        cal.add(Calendar.YEAR, ((dayCount + 150-1) / 150));
        filter.put("endDay", cal.getTime());
        filter.put("dateType", 0);
        List<HolidayBean> workdayList = this.queryByDate(filter);
        filter.put("dateType", 1);
        List<HolidayBean> holidayList = this.queryByDate(filter);
        
        // 是否包含当天
        cal.setTime(startDate);
        if (isContaint) {
            cal.add(Calendar.DAY_OF_MONTH, -1);
        }

        for (int i = 0; i < dayCount; i++) {
            cal.add(Calendar.DAY_OF_MONTH, 1);
            // 判断是否是工作日
            while (!this.isWorkDay(cal.getTime(), cal.get(Calendar.DAY_OF_WEEK), holidayList, workdayList)) {
                // 下一天
                cal.add(Calendar.DAY_OF_MONTH, 1);
            }  
        }
        return cal.getTime();
    }

    /**
     * 是否是工作日
     * @param date  日期
     * @param week  星期几
     * @param holidayList
     * @param workdayList
     * @return
     */
    private boolean isWorkDay(Date date, Integer week, List<HolidayBean> holidayList, List<HolidayBean> workdayList) {
        switch (week) {
        case 1:
        case 7:
            return this.holidayIsWorkday(date, workdayList);
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
            return !this.workdayIsHoliday(date, holidayList);
        }
        return false;
    }

    /**
     * 工作日（周一至周五）是否是节假日
     * 
     * @param date
     * @param holidayList
     * @return
     */
    private boolean workdayIsHoliday(Date date, List<HolidayBean> holidayList) {
        for (HolidayBean bean : holidayList) {
            if (date.equals(bean.getHDate())) {
                return true;
//            } else if (date.before(bean.getHDate())) {
//                return false;
            }
        }
        return false;
    }

    /**
     * 双休日（周六周日）是否是工作日
     * 
     * @param date
     * @param holidayList
     * @return
     */
    private boolean holidayIsWorkday(Date date, List<HolidayBean> workdayList) {
        for (HolidayBean bean : workdayList) {
            if (date.equals(bean.getHDate())) {
                return true;
//            } else if (date.before(bean.getHDate())) {
//                return false;
            }
        }
        return false;
    }
}