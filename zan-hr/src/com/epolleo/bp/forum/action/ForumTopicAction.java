/**
 * This file was generated by Data Model Tool
 * See <a href="http://www.hna.net/dmt/schema">http://www.hna.net/dmt/schema</a>
 *
 * Copyright (c) 2012 hnair.com
 * All rights reserved.
 * Date: 2012-10-19
 */
package com.epolleo.bp.forum.action;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.HashMap;

import javax.annotation.Resource;
import javax.servlet.ServletContext;

import com.epolleo.bp.forum.bean.ForumTopicBean;
import com.epolleo.bp.forum.dao.ibatis.ForumTopicDao;
import com.epolleo.bp.pub.PagingForm;
import com.epolleo.bp.pub.PagingResult;
import com.epolleo.bp.seq.bean.IdKind;
import com.epolleo.bp.seq.service.SeqService;

import org.apache.commons.fileupload.FileItem;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.citrus.service.requestcontext.parser.ParserRequestContext;
import com.alibaba.citrus.turbine.Context;
import com.alibaba.citrus.turbine.dataresolver.Params;
import com.alibaba.citrus.turbine.util.Function;
import com.alibaba.citrus.turbine.util.FunctionDir;
import com.alibaba.citrus.turbine.util.FunctionName;

/**
 * <p>
 * 论坛主题的Action
 * </p>
 * 
 * Date: 2012-10-19 上午09:49:16
 * 
 * @author Data Model Tool
 * @version 1.0
 */
@Function()
@FunctionDir(id="bp.forumTopic", name="论坛主题")
public class ForumTopicAction {

    protected Logger logger = LoggerFactory.getLogger(getClass());

    @Resource
    private ParserRequestContext parser;

    @Resource
    private SeqService seqService;

    @Resource
    private ForumTopicDao forumtopicDao;

    /**
     * 处理指定页及条件的查询结果
     * 
     * @param form
     *            分页参数
     * @param entity
     *            查询过滤参数
     * @see Context
     * @see PagingForm
     * @see ForumTopicBean
     */
    @Function("bp.forumTopic.query")
    @FunctionName("主题查询")
    public void doQuery(Context context, @Params PagingForm form,
        @Params ForumTopicBean entity) {
        int totalCount = 0;
        form.setRows(50);
        HashMap<String, Object> filter = new HashMap<String, Object>();
        Object gpid = entity.getGroupId();
        if (gpid != null) {
            filter.put("groupId", gpid);
        }
        Object ptid = entity.getParentId();
        if (ptid != null) {// 当查询所有根主题时传入
            filter.put("parentId", ptid);
        }
        Object isleaf = entity.getIsleaf();
        if (isleaf != null) {// 当查询所有根主题时传入用于分页，借用此字段
            filter.put("isleaf", isleaf);
            totalCount = forumtopicDao.queryTotalCount(entity);
        }
        Object tpid = entity.getTopicId();
        if (tpid != null) {// 当查询指定主题时候传入（modify）
            filter.put("topicId", tpid);
        }
        Object rtid = entity.getRootId();
        if (rtid != null) {// 平板展现详细时传入
            filter.put("rootId", rtid);
            form.setOrder("asc");
        } else {
            form.setOrder("desc");
        }
        form.setFilterMap(filter);
        form.setSort("createTime");
        PagingResult<ForumTopicBean> result = forumtopicDao.findPaging(form,
            false);
        if (isleaf != null && result.getTotal() > 0) {// 当查询所有根主题时借用字段写入totalCount
            result.getRows().get(0).setGroupId((long) totalCount);
        }
        context.put("json", result);
    }

    @Function("bp.forumTopic.query")
    @FunctionName("主题查询")
    public void doQuerybyKeyword(Context context, @Params PagingForm form,
        @Params ForumTopicBean entity) {
        try {
            int totalCount = 0;
            form.setRows(50);
            HashMap<String, Object> filter = new HashMap<String, Object>();
            Object gpid = entity.getGroupId();
            if (gpid != null) {
                filter.put("groupId", gpid);
            }
            Object ptid = entity.getParentId();
            if (ptid != null) {// 当查询所有根主题时传入
                filter.put("parentId", ptid);
            }
            Object isleaf = entity.getIsleaf();
            if (isleaf != null) {// 当查询所有根主题时传入用于分页，借用此字段
                filter.put("isleaf", isleaf);
                totalCount = forumtopicDao.queryTotalCount(entity);
            }
            Object tpcon = entity.getTopicContext();
            if (tpcon != null) {// 搜索关键字
                filter.put("topicContext", tpcon);
            }
            form.setOrder("desc");
            form.setFilterMap(filter);
            form.setSort("createTime");
            PagingResult<ForumTopicBean> result = forumtopicDao.searchPaging(
                form, false);
            if (isleaf != null) {// 当查询所有根主题时借用字段写入totalCount
                result.getRows().get(0).setGroupId((long) totalCount);
            }
            context.put("json", result);
        } catch (IndexOutOfBoundsException e) {
            // TODO Auto-generated catch block
        }
    }

    /**
     * @param entity
     *            新增论坛主题对象
     * @see Context
     * @see ForumTopicBean
     */
    @Function("bp.forumTopic.save")
    @FunctionName("主题保存")
    public void doSave(Context context, @Params ForumTopicBean entity) {// 新帖
        long newTpId = seqService.getNewId(IdKind.TopicId);
        if (entity.getRootId() == null) {// 发新帖
            entity.setRootId(newTpId);
        } else {// 回复帖
            forumtopicDao.updateFatherNotleaf(entity);
            forumtopicDao.updateRootReplyCount(entity);
        }
        entity.setTopicId(newTpId);
        forumtopicDao.save(entity);
        context.put("json", entity);
    }

    /**
     * @param id
     *            待删除论坛主题的关键值（比如主键Key）
     * @see Context
     */
    @Function("bp.forumTopic.delete")
    @FunctionName("主题删除")
    public void doDelete(Context context, @Params ForumTopicBean entity) {// 删除帖子

        ForumTopicBean currTopic = forumtopicDao.find(entity.getTopicId());
        Long rootId = currTopic.getRootId();
        Long groupId = currTopic.getGroupId();

        HashMap<String, Object> result = new HashMap<String, Object>();
        int delete = deletechild(entity.getTopicId());
        if (entity.getParentId() != 0) {
            forumtopicDao.updateFatherleaf(entity);
        }
        // int delete = forumtopicDao.delete(id);
        entity.setRootId(rootId);
        entity.setGroupId(groupId);
        Integer totalrep = forumtopicDao.queryTotalReply(entity);
        entity.setReplycount((long) totalrep);
        if(entity.getRootId().longValue()!=entity.getTopicId().longValue()){
            forumtopicDao.updateRootReplyCountReal(entity);
        }
        result.put("success", delete == 1);
        context.put("json", result);
    }

    public int deletechild(Long id) {
        int delete = 0;
        ForumTopicBean ftchild = forumtopicDao.findChild(id);
        if (ftchild != null) {
            deletechild(ftchild.getTopicId());
        }
        delete = forumtopicDao.delete(id.toString());
        return delete;
    }

    /**
     * @param entity
     *            修改论坛主题对象
     * @see Context
     * @see ForumTopicBean
     */
    @Function("bp.forumTopic.update")
    @FunctionName("主题更新")
    public void doUpdate(Context context, @Params ForumTopicBean entity) {// 修改帖子
        forumtopicDao.update(entity);
        context.put("json", entity);
    }

    @Function("")
    public void doUpload(ServletContext webApp, Context context,
        @Params ForumTopicBean entity) {// 上传图片
        String fileUploadPath = (String) webApp
            .getAttribute("soc.web.fileuploadpath.confidential");
        String fileUploadUrl = (String) webApp
            .getAttribute("soc.web.fileuploadurl");
        if (fileUploadPath == null) {
            fileUploadPath = "/soc/tomcat6/webapps/sim/ux/fileupload/a/";
            fileUploadUrl = "/ux/fileupload/a/";
        }
        FileItem fileItem = parser.getParameters().getFileItem("imageFile");
        String extension = fileItem.toString().substring(
            fileItem.toString().lastIndexOf('.') + 1,
            fileItem.toString().length());
        Long saveNametime = new Date().getTime();
        String saveName = saveNametime.toString() + "." + extension;
        String savePath = fileUploadPath;
        String nm = this.parser.getRequest().getScheme() + "://"
            + this.parser.getRequest().getServerName() + ":"
            + (this.parser.getRequest().getServerPort());
        try {
            File uploadFilePath = new File(savePath);
            if (uploadFilePath.exists() == false) {
                uploadFilePath.mkdirs();
                System.out.println("路径不存在,但是已经成功创建了" + savePath);
            } else {
                System.out.println("路径存在了" + savePath);
            }
            OutputStream fos = new FileOutputStream(new File(savePath
                + saveName));
            InputStream fis = fileItem.getInputStream();
            byte[] buffer = new byte[1024];
            int len = 0;
            while ((len = fis.read(buffer)) > 0) {
                fos.write(buffer, 0, len);
            }
            fos.close();
            fis.close();
        } catch (Exception foe) {
            System.out.println("上传文件为0字节");
            foe.printStackTrace();
        }
        context.put("json", nm + this.parser.getRequest().getContextPath()
            + fileUploadUrl + saveName);
    }
}