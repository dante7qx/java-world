/**
 * This file was generated by Data Model Tool
 * See <a href="http://www.hna.net/dmt/schema">http://www.hna.net/dmt/schema</a>
 *
 * Copyright (c) 2012 epolleo.com
 * All rights reserved.
 * TaskDefAction.java
 * Date: 2012-11-10
 */
package com.epolleo.bp.task.action;

import java.util.Date;
import java.util.HashMap;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.citrus.turbine.Context;
import com.alibaba.citrus.turbine.dataresolver.Param;
import com.alibaba.citrus.turbine.dataresolver.Params;
import com.alibaba.citrus.turbine.util.Function;
import com.alibaba.citrus.turbine.util.FunctionDir;
import com.alibaba.citrus.turbine.util.FunctionName;

import com.epolleo.bp.seq.bean.IdKind;
import com.epolleo.bp.seq.service.SeqService;
import com.epolleo.bp.pub.CronExpression;
import com.epolleo.bp.pub.LoginUser;
import com.epolleo.bp.pub.PagingForm;
import com.epolleo.bp.pub.PagingResult;
import com.epolleo.bp.task.bean.TaskDefBean;
import com.epolleo.bp.task.dao.TaskDefDao;
import com.epolleo.bp.util.DateUtils;
import com.epolleo.bp.util.LoginConstant;

/**
 * <p>
 * 定时任务的Action
 * </p>
 * 
 * Date: 2012-11-10 PM03:27:06
 * 
 * @version 1.0
 */
@Function()
@FunctionDir(id="bp.task", name="定时任务")
public class TaskDefAction {

    protected Logger logger = LoggerFactory.getLogger(getClass());

    @Resource
    private TaskDefDao dao;

    @Resource
    private SeqService seqService;

    /**
     * 处理指定页及条件的查询结果
     * 
     * @param form
     *            分页参数
     * @param entity
     *            查询过滤参数
     * @see Context
     * @see PagingForm
     * @see TaskDefBean
     */
    @Function("bp.task.query")
    @FunctionName("定时任务查询")
    public void doQuery(Context context, @Params PagingForm form, @Params TaskDefBean entity) {
        if (entity.getBeanId() != null && !"".equals(entity.getBeanId().trim())) {
            form.addFilter("beanId", "%" + entity.getBeanId() + "%");
        }
        PagingResult<TaskDefBean> result = dao.findPaging(form, true);
        context.put("json", result);
    }

    /**
     * @param entity
     *            新增定时任务对象
     * @see Context
     * @see TaskDefBean
     */
    @Function("bp.task.save")
    @FunctionName("定时任务保存")
    public void doSave(Context context, HttpServletRequest request, @Params TaskDefBean entity) {
        entity.setTaskId((int) seqService.getNewIdLong(IdKind.TaskDefId));
        entity.setUpdateTime(DateUtils.getCurrentDate());
        LoginUser user = (LoginUser) request.getSession().getAttribute(LoginConstant.LOGIN_USER_SESSION_KEY);
        entity.setUpdateUser(user.getUserId());
        dao.save(entity);
        context.put("json", entity);
    }

    /**
     * @param id
     *            待删除定时任务的关键值（比如主键Key）
     * @see Context
     */
    @Function("bp.task.delete")
    @FunctionName("定时任务删除")
    public void doDelete(Context context, @Param(name = "taskId") String id) {
        HashMap<String, Object> result = new HashMap<String, Object>();
        int delete = dao.delete(id);
        result.put("success", delete == 1);
        context.put("json", result);
    }

    /**
     * @param entity
     *            修改定时任务对象
     * @see Context
     * @see TaskDefBean
     */
    @Function("bp.task.update")
    @FunctionName("定时任务更新")
    public void doUpdate(Context context, HttpServletRequest request, @Params TaskDefBean entity) {
        entity.setUpdateTime(DateUtils.getCurrentDate());
        LoginUser user = (LoginUser) request.getSession().getAttribute(LoginConstant.LOGIN_USER_SESSION_KEY);
        entity.setUpdateUser(user.getUserId());
        dao.update(entity);
        context.put("json", entity);
    }

    @Function()
    public void doValidCron(Context context, @Param(name = "ce") String ce) {
        try {
            new CronExpression(ce);
            context.put("json", true);
        } catch (Exception e) {
            context.put("json", e.getMessage());
        }
    }

    public void doMock() {
        System.out.println(" ------------------------- Task demo runing at " + new Date());
    }
}